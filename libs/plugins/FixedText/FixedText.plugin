<?php
/**
# ######################################################################
# Project:     ScriptMind::Plugins: Version 0.0.1
# **********************************************************************
# Copyright (C) 2013 Bruce Clement. (http://www.clement.co.nz/)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License (LGPL)
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received copies of the GNU General Public License and the
# GNU Lesser General Public License along with this program; if not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA  02110-1301, USA.
#
# Please note that the terms of the LGPL version 3 permit relicencing under
# the terms of GNU General Public License (GPL) version 3.
# It is both anticipated and encouraged that people using this plugin as
# source for their own plugins may choose to relicence it under the GPL.
# **********************************************************************
#
# For questions, help, comments, discussion, etc., please join the
# ScriptMind::Links Forum
#
# @link           http://www.scriptmind.org/
# @copyright      2013 Bruce Clement. (http://www.clement.co.nz/)
# @license http://URL LGPLv3 or later
# @projectManager Bruce Clement
# @package        ScriptMind::Plugins
# ######################################################################
*/

/**
 * Generic place fixed text in places
 *
 * @author Bruce Clement
 */
class FixedText extends Plugin {
    public $TaskName;
    public $Text;
    /**
     * Provides a description of the module for the admin plugins page
     */
    public function describe( ) {
        return <<<EOD
Allows the placement of fixed text on the page.
Primarily intended for debugging templates
EOD;
    }
    /**
     * Multiple copies of this plugin can exist.
     */
    public function AllowMultiple( ) {
        return true;
    }
    /**
     * Get a list of options this module provides
     * Child classes should add their options to this array
     * @return array One line per option, each line is an array:
     *         'Name': option name,
     *         'Value': current value
     *         'Type': Bool, Integer, Url, Text, or Enumeration array
     *         'Description': Text
     */
    public function enumerate_options() {
        return array_merge( parent::enumerate_options(),
                            array( array( 'TaskName', 'Task Name', $this->TaskName,
                                          array('PageTop'=>'Page Top',
                                                'PageFooter'=>'Page Footer',
                                                'LatePageFooter'=>'Late Page Footer',
                                              ), "The fetchValues point to have the text supplied"),
                                   array( 'Text', 'Text', $this->Text, 'Text', "Anything you like")
                            )
                );
    }

    public function __construct( $anchor ) {
        parent::__construct( $anchor );
        $this->TaskName='PageFooter';
        $this->Text='Text';
    }
    /**
     * Set an option
     * Child classes should update their options from recognised options
     * and pass anything they don't understand to their parent classes
     */
    public function set_option( $name, $value ) {
        switch( $name ) {
            case 'TaskName' : $this->TaskName = $value;     break;
            case 'Text' : $this->Text = $value;     break;
            default : parent::set_option( $name, $value );
        }
    }
    public function after_save( $state_before, $state_now ) {}
    /**
     * Called after loading from database to complete the
     * initialisation of the object
     */
    public function after_load( $id, $anchor ) {
        parent::after_load($id, $anchor);
    }
    /**
     * Called after loading plugins from the database to insert their callbacks
     * into the control structures used to implement fetchValues
     */
    public function register_callbacks() {
        $this->provides( $this->TaskName, array( $this, 'PrintText'));
        parent::register_callbacks();
    }

    /**
     * Called to perform any required processing
     * by template engine.
     * The overridden register_callbacks should have registered us to perform
     * these task
     */
    public function PrintText( ) {
        return $this->Text;
    }
}
